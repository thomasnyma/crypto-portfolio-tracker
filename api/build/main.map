{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/nomicsConnector.js","webpack:///external \"axios\"","webpack:///external \"graphql-yoga\"","webpack:///external \"memoizee\""],"names":["NOMICS_API_KEY","typeDefs","resolvers","Query","getCoinInfo","root","variables","context","nomics","currency","server","GraphQLServer","NomicsConnector","start","console","log","constructor","apiKey","client","axios","create","baseURL","method","responseType","params","key","res","ids","data"],"mappings":";;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA,MAAMA,cAAc,GAAG,kCAAvB;AAEA,MAAMC,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCA;AAkCA,MAAMC,SAAS,GAAG;AACjBC,OAAK,EAAE;AACNC,eAAW,EAAE,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,KACZA,OAAO,CAACC,MAAR,CAAeJ,WAAf,CAA2BE,SAAS,CAACG,QAArC;AAFK;AADU,CAAlB;AAOA,MAAMC,MAAM,GAAG,IAAIC,0DAAJ,CAAkB;AAChCV,UADgC;AAEhCC,WAFgC;AAGhCK,SAAO,EAAE;AACRC,UAAM,EAAE,IAAII,wDAAJ,CAAoBZ,cAApB;AADA;AAHuB,CAAlB,CAAf,C,CAQA;;AACAU,MAAM,CAACG,KAAP,CAAa,MAAMC,OAAO,CAACC,GAAR,CAAY,yCAAZ,CAAnB,E;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA,MAAMH,eAAN,CAAsB;AACrBI,aAAW,CAACC,MAAD,EAAS;AACnB,SAAKC,MAAL,GAAcC,4CAAK,CAACC,MAAN,CAAa;AAC1BC,aAAO,EAAE,2BADiB;AAE1BC,YAAM,EAAE,KAFkB;AAG1BC,kBAAY,EAAE,MAHY;AAI1BC,YAAM,EAAE;AAAEC,WAAG,EAAER;AAAP;AAJkB,KAAb,CAAd,CADmB,CAQnB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,GApBoB,CAsBrB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEiB,QAAXb,WAAW,CAACK,QAAD,EAAW;AAC3B,UAAMiB,GAAG,GAAG,MAAM,KAAKR,MAAL,CAAY,oBAAZ,EAAkC;AACnDM,YAAM,EAAE;AAAEG,WAAG,EAAElB;AAAP;AAD2C,KAAlC,CAAlB;AAGA,WAAOiB,GAAG,CAACE,IAAX;AACA,GAxCoB,CA0CrB;AACA;AACA;AACA;;;AA7CqB;;AAgDPhB,8EAAf,E;;;;;;;;;;;;;;;;;;;;;;;ACnDA,kC;;;;;;;;;;;ACAA,yC;;;;;;;;;;;ACAA,qC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { GraphQLServer } from 'graphql-yoga';\r\nimport NomicsConnector from './nomicsConnector';\r\n\r\nconst NOMICS_API_KEY = '656168ea65bbcbbd4b425c89446b2ed7';\r\n\r\nconst typeDefs = `\r\n  type Coin {\r\n    currency: String\r\n    id: String\r\n    status: String\r\n    price: String\r\n    price_date: String\r\n    price_timestamp: String\r\n    symbol: String\r\n    circulating_supply: String\r\n    max_supply: String\r\n    name: String\r\n    logo_url: String\r\n    market_cap: String\r\n    market_cap_dominance: String\r\n    transparent_market_cap: String\r\n    num_exchanges: String\r\n    num_pairs: String\r\n    num_pairs_unmapped: String\r\n    first_candle: String\r\n    first_trade: String\r\n    first_order_book: String\r\n    first_priced_at: String\r\n    rank: String\r\n    rank_delta: String\r\n    high: String\r\n    high_timestamp: String\r\n  }\r\n\r\n  type Query {\r\n\t  getCoinInfo(currency: String!): [Coin]\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n\tQuery: {\r\n\t\tgetCoinInfo: (root, variables, context) =>\r\n\t\t\tcontext.nomics.getCoinInfo(variables.currency),\r\n\t},\r\n};\r\n\r\nconst server = new GraphQLServer({\r\n\ttypeDefs,\r\n\tresolvers,\r\n\tcontext: {\r\n\t\tnomics: new NomicsConnector(NOMICS_API_KEY),\r\n\t},\r\n});\r\n\r\n// Go to http://localhost:4000 to test the API\r\nserver.start(() => console.log('Server running on http://localhost:4000'));\r\n","import axios from 'axios';\r\nimport memoize from 'memoizee';\r\n\r\nclass NomicsConnector {\r\n\tconstructor(apiKey) {\r\n\t\tthis.client = axios.create({\r\n\t\t\tbaseURL: 'https://api.nomics.com/v1',\r\n\t\t\tmethod: 'get',\r\n\t\t\tresponseType: 'json',\r\n\t\t\tparams: { key: apiKey },\r\n\t\t});\r\n\r\n\t\t// this.getPricesByCurrencyCached = memoize(this.getPricesByCurrency, {\r\n\t\t// \tmaxAge: 300000, // 5 minutes til cache expiration\r\n\t\t// \tpreFetch: 0.05, // pre-fetch 15s before expiration\r\n\t\t// \tpromise: 'then', // handle async\r\n\t\t// });\r\n\r\n\t\t// this.getCoinInfoCached(currency) = memoize(this.getCoinInfo(currency), {\r\n\t\t// \tmaxAge: 300000, // 5 minutes til cache expiration\r\n\t\t// \tpreFetch: 0.05, // pre-fetch 15s before expiration\r\n\t\t// \tpromise: 'then', // handle async\r\n\t\t// });\r\n\t}\r\n\r\n\t// async getPrices() {\r\n\t// \tconst res = await this.client('/prices');\r\n\t// \treturn res.data;\r\n\t// }\r\n\r\n\t// async getPricesByCurrency() {\r\n\t// \tconst prices = await this.getPrices();\r\n\t// \treturn prices.reduce((pricesByCurrency, { currency, price }) => {\r\n\t// \t\tpricesByCurrency[currency] = price;\r\n\t// \t\treturn pricesByCurrency;\r\n\t// \t}, {});\r\n\t// }\r\n\r\n\tasync getCoinInfo(currency) {\r\n\t\tconst res = await this.client('/currencies/ticker', {\r\n\t\t\tparams: { ids: currency },\r\n\t\t});\r\n\t\treturn res.data;\r\n\t}\r\n\r\n\t// async getPrice(currency) {\r\n\t// \tconst pricesByCurrency = await this.getPricesByCurrencyCached();\r\n\t// \treturn pricesByCurrency[currency];\r\n\t// }\r\n}\r\n\r\nexport default NomicsConnector;\r\n","module.exports = require(\"axios\");","module.exports = require(\"graphql-yoga\");","module.exports = require(\"memoizee\");"],"sourceRoot":""}